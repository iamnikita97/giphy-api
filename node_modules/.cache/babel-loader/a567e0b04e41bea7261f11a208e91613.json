{"ast":null,"code":"var _jsxFileName = \"/var/www/html/to-do-list/src/Components/ListCards.js\";\nimport React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckIcon from '@material-ui/icons/Check';\nimport NoDataFound from './TabNoDataFound';\nimport { IconButton } from '@material-ui/core';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport moment from 'moment';\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: \"100%\",\n    marginBottom: \"10px\"\n  }\n});\nexport default function ImgMediaCard(props) {\n  const classes = useStyles();\n  const tabType = props.tabType;\n  const todoSearchFor = props.state.todoSearchFor;\n\n  function getDataBasedOnRequestType(tabType, todoSearchFor) {\n    let tabTypeBasedData = tabType == 'all' ? props.state.allTodoData : props.state.allTodoData.filter(obj => obj.todoType === tabType);\n\n    if (todoSearchFor == \"today\") {\n      tabTypeBasedData = tabTypeBasedData.filter(obj => moment(obj.txtWhen).format(\"DD/MM/YYYY\") == moment().format(\"DD/MM/YYYY\"));\n    } else if (todoSearchFor == \"upcoming\") {\n      tabTypeBasedData = tabTypeBasedData.filter(obj => moment(obj.txtWhen).format(\"DD/MM/YYYY\") > moment().format(\"DD/MM/YYYY\"));\n    } else {\n      tabTypeBasedData = tabTypeBasedData.filter(obj => moment(obj.txtWhen).format(\"DD/MM/YYYY\") < moment().format(\"DD/MM/YYYY\"));\n    }\n\n    return tabTypeBasedData;\n  } //console.log(getDataBasedOnRequestType(tabType,todoSearchFor));\n\n\n  const tabTypeBasedData = getDataBasedOnRequestType(tabType, todoSearchFor);\n\n  if (tabTypeBasedData.length > 0) {\n    const count = props.count;\n    console.log(props);\n    return (//Looping through all data\n      //props.state.allTodoData.map((item, index) =>\n      tabTypeBasedData.map((item, index) => React.createElement(Grid, {\n        item: true,\n        xs: 12,\n        md: 12,\n        key: index.toString(),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, React.createElement(Card, {\n        className: classes.card,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59\n        },\n        __self: this\n      }, React.createElement(CardActionArea, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, React.createElement(CardContent, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, React.createElement(Typography, {\n        gutterBottom: true,\n        variant: \"h5\",\n        component: \"h2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69\n        },\n        __self: this\n      }, item.txtWhatToDo, \"  \", item.txtWhenDiffFormat), React.createElement(Typography, {\n        variant: \"body2\",\n        color: \"textSecondary\",\n        component: \"p\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73\n        },\n        __self: this\n      }, item.txtWhereToDo))), React.createElement(CardActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78\n        },\n        __self: this\n      }, React.createElement(IconButton, {\n        size: \"small\",\n        onClick: () => props.handleChangeTodoStatus(item.todoType, item.counterId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 79\n        },\n        __self: this\n      }, item.todoType === 'active' ? React.createElement(CheckIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }) : React.createElement(UndoIcon, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      })), React.createElement(IconButton, {\n        size: \"small\",\n        onClick: () => props.handleRemoval(item.counterId),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 85\n        },\n        __self: this\n      }, React.createElement(DeleteIcon, {\n        title: \"Delete Todo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }))))))\n    );\n  }\n\n  return React.createElement(NoDataFound, {\n    tabType: tabType,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  });\n}","map":{"version":3,"sources":["/var/www/html/to-do-list/src/Components/ListCards.js"],"names":["React","useState","makeStyles","Card","CardActionArea","CardActions","CardContent","Button","Typography","Grid","DeleteIcon","CheckIcon","NoDataFound","IconButton","UndoIcon","moment","CardMedia","EventNoteIcon","useStyles","card","maxWidth","marginBottom","ImgMediaCard","props","classes","tabType","todoSearchFor","state","getDataBasedOnRequestType","tabTypeBasedData","allTodoData","filter","obj","todoType","txtWhen","format","length","count","console","log","map","item","index","toString","txtWhatToDo","txtWhenDiffFormat","txtWhereToDo","handleChangeTodoStatus","counterId","handleRemoval"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Button from \"@material-ui/core/Button\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Grid from \"@material-ui/core/Grid\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport CheckIcon from '@material-ui/icons/Check';\nimport NoDataFound from './TabNoDataFound';\nimport { IconButton } from '@material-ui/core';\nimport UndoIcon from '@material-ui/icons/Undo';\nimport moment from 'moment';\n\nimport CardMedia from \"@material-ui/core/CardMedia\";\nimport EventNoteIcon from '@material-ui/icons/EventNote';\nconst useStyles = makeStyles({\n    card: {\n        maxWidth: \"100%\",\n        marginBottom: \"10px\"\n    }\n});\n\nexport default function ImgMediaCard(props) {\n\n    const classes = useStyles();\n    const { tabType } = props;\n    const { todoSearchFor } = props.state;\n\n    function getDataBasedOnRequestType(tabType,todoSearchFor) {\n\n        let tabTypeBasedData =  (tabType == 'all') ? props.state.allTodoData : props.state.allTodoData.filter((obj) => obj.todoType === tabType);\n        if(todoSearchFor == \"today\") {\n            tabTypeBasedData = tabTypeBasedData.filter((obj) => moment(obj.txtWhen).format(\"DD/MM/YYYY\") == moment().format(\"DD/MM/YYYY\"));\n        } else if (todoSearchFor == \"upcoming\") {\n             tabTypeBasedData = tabTypeBasedData.filter((obj) => moment(obj.txtWhen).format(\"DD/MM/YYYY\") > moment().format(\"DD/MM/YYYY\"));\n        } else {\n            tabTypeBasedData = tabTypeBasedData.filter((obj) => moment(obj.txtWhen).format(\"DD/MM/YYYY\") < moment().format(\"DD/MM/YYYY\"));\n        }\n        return tabTypeBasedData;\n    }\n\n    //console.log(getDataBasedOnRequestType(tabType,todoSearchFor));\n\n    const tabTypeBasedData = getDataBasedOnRequestType(tabType,todoSearchFor);\n    if (tabTypeBasedData.length > 0) {\n\n        const { count } = props;\n        console.log(props);\n\n        return (\n            //Looping through all data\n            //props.state.allTodoData.map((item, index) =>\n            tabTypeBasedData.map((item, index) =>\n\n                    <Grid item xs={12} md={12} key={index.toString()}>\n                        <Card className={classes.card}>\n                            <CardActionArea>\n                                {/*<CardMedia\n                                                component=\"img\"\n                                                alt=\"Contemplative Reptile\"\n                                                height=\"140\"\n                                                image=\"/images/contemplative-reptile.jpg\"\n                                                title=\"Contemplative Reptile\"\n                                /> */ }\n                                <CardContent>\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                                        {item.txtWhatToDo}  {item.txtWhenDiffFormat}\n\n                                    </Typography>\n                                    <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n                                        {item.txtWhereToDo}\n                                    </Typography>\n                                </CardContent>\n                            </CardActionArea>\n                            <CardActions>\n                                <IconButton size=\"small\"\n                                    onClick={()=> props.handleChangeTodoStatus(item.todoType,item.counterId)}\n                                >\n                                    {item.todoType === 'active' ? <CheckIcon /> : <UndoIcon /> }\n                                \n                                </IconButton>\n                                <IconButton size=\"small\"\n                                    onClick={()=> props.handleRemoval(item.counterId)}\n                                >\n                                    <DeleteIcon title=\"Delete Todo\"/>\n                                </IconButton>\n                            </CardActions>\n                        </Card>\n                    </Grid>\n            )\n        );\n    }\n    return <NoDataFound tabType={tabType} />;\n}\n"]},"metadata":{},"sourceType":"module"}